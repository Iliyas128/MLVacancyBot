from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from config.config import BOT_TOKEN
from src.db.database import get_recent_jobs, get_pending_notifications_count
from src.bot.handlers import split_message
from src.bot.notifications import handle_notification_callback
import sqlite3
from datetime import datetime

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

@dp.message(Command("start"))
async def start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –∏—â—É –≤–∞–∫–∞–Ω—Å–∏–∏ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é —Ä–µ–∑—é–º–µ –ø–æ –Ω–∞–π–¥–µ–Ω–Ω—ã–º –∫–æ–Ω—Ç–∞–∫—Ç–∞–º.\n\nüìã <b>–ö–æ–º–∞–Ω–¥—ã:</b>\n‚Ä¢ /jobs - –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏\n‚Ä¢ /notifications - –æ–∂–∏–¥–∞—é—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n‚Ä¢ /stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–∫–ª–∏–∫–æ–≤\n‚Ä¢ /cleanup - –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö\n‚Ä¢ /myid - –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à Chat ID –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n\nüì® <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b>\n–ü—Ä–∏ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–∏ –Ω–æ–≤–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –æ—Ç–∫–ª–∏–∫–∞.", parse_mode="HTML")

@dp.message(Command("jobs"))
async def jobs(message: types.Message):
    rows = get_recent_jobs(limit=10)
    if not rows:
        await message.answer("–ü–æ–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π –Ω–µ—Ç.")
        return

    # –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–≤—å—é
    lines = []
    for text, usernames, emails, links, prob, created_at in rows:
        preview = (text.replace("\n", " ").strip()[:200] + ("‚Ä¶" if len(text) > 200 else ""))
        parts = []
        if usernames:
            parts.append("@" + usernames.split(",")[0])
        if emails:
            parts.append(emails.split(",")[0])
        if links:
            parts.append(links.split(",")[0])
        contact = " | ".join(parts) if parts else "–∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –Ω–µ—Ç"
        lines.append(f"‚Ä¢ {preview}\n  score: {prob:.2f} | {contact}")

    full = "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏:\n\n" + "\n\n".join(lines)
    for chunk in split_message(full):
        await message.answer(chunk)

@dp.message(Command("notifications"))
async def notifications(message: types.Message):
    count = get_pending_notifications_count()
    if count == 0:
        await message.answer("–ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –≤–∞–∫–∞–Ω—Å–∏—è—Ö.")
    else:
        await message.answer(f"–£ –≤–∞—Å –µ—Å—Ç—å {count} –æ–∂–∏–¥–∞—é—â–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –≤–∞–∫–∞–Ω—Å–∏—è—Ö.")

@dp.message(Command("stats"))
async def stats(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—Ç–∫–ª–∏–∫–æ–≤"""
    import sqlite3
    
    with sqlite3.connect("data/db.sqlite3") as conn:
        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–∫–∞–Ω—Å–∏–π
        total_jobs = conn.execute("SELECT COUNT(*) FROM jobs").fetchone()[0]
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ä–µ–∑—é–º–µ
        total_sent = conn.execute("SELECT COUNT(*) FROM jobs_sent").fetchone()[0]
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        confirmed = conn.execute("SELECT COUNT(*) FROM job_notifications WHERE status = 'confirmed'").fetchone()[0]
        skipped = conn.execute("SELECT COUNT(*) FROM job_notifications WHERE status = 'skipped'").fetchone()[0]
        pending = conn.execute("SELECT COUNT(*) FROM job_notifications WHERE status = 'pending'").fetchone()[0]
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –æ—Ç–∫–ª–∏–∫–æ–≤
        recent_sent = conn.execute("""
            SELECT username, sent_at FROM jobs_sent 
            ORDER BY sent_at DESC LIMIT 5
        """).fetchall()
    
    stats_text = f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–∫–ª–∏–∫–æ–≤:</b>\n\n"
    stats_text += f"üìã –í—Å–µ–≥–æ –≤–∞–∫–∞–Ω—Å–∏–π –Ω–∞–π–¥–µ–Ω–æ: {total_jobs}\n"
    stats_text += f"üì§ –í—Å–µ–≥–æ —Ä–µ–∑—é–º–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {total_sent}\n\n"
    stats_text += f"üéØ <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b>\n"
    stats_text += f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: {confirmed}\n"
    stats_text += f"‚ùå –ü—Ä–æ–ø—É—â–µ–Ω–æ: {skipped}\n"
    stats_text += f"‚è≥ –û–∂–∏–¥–∞–µ—Ç: {pending}\n\n"
    
    if recent_sent:
        stats_text += f"üìÖ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–∫–ª–∏–∫–∏:</b>\n"
        for username, sent_at in recent_sent:
            stats_text += f"‚Ä¢ @{username}\n"
    
    await message.answer(stats_text, parse_mode="HTML")

@dp.message(Command("cleanup"))
async def cleanup(message: types.Message):
    """–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –∑–∞–ø–∏—Å–∏"""
    import sqlite3
    
    with sqlite3.connect("data/db.sqlite3") as conn:
        # –£–¥–∞–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π
        old_notifications = conn.execute("""
            DELETE FROM job_notifications 
            WHERE created_at < datetime('now', '-30 days')
        """).rowcount
        
        # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –æ–± –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π
        old_sent = conn.execute("""
            DELETE FROM jobs_sent 
            WHERE sent_at < datetime('now', '-30 days')
        """).rowcount
        
        # –£–¥–∞–ª—è–µ–º –≤–∞–∫–∞–Ω—Å–∏–∏ —Å—Ç–∞—Ä—à–µ 60 –¥–Ω–µ–π
        old_jobs = conn.execute("""
            DELETE FROM jobs 
            WHERE created_at < datetime('now', '-60 days')
        """).rowcount
    
    cleanup_text = f"üßπ <b>–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:</b>\n\n"
    cleanup_text += f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {old_notifications}\n"
    cleanup_text += f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –æ–± –æ—Ç–ø—Ä–∞–≤–∫–µ: {old_sent}\n"
    cleanup_text += f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ –≤–∞–∫–∞–Ω—Å–∏–π: {old_jobs}\n"
    
    await message.answer(cleanup_text, parse_mode="HTML")

@dp.message(Command("myid"))
async def myid(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç chat_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    user_id = message.from_user.id
    chat_id = message.chat.id
    username = message.from_user.username or "–ù–µ—Ç username"
    
    info_text = f"üìã <b>–í–∞—à–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>\n\n"
    info_text += f"üÜî <b>User ID:</b> {user_id}\n"
    info_text += f"üí¨ <b>Chat ID:</b> {chat_id}\n"
    info_text += f"üë§ <b>Username:</b> @{username}\n\n"
    info_text += f"üí° <b>–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:</b>\n"
    info_text += f"–î–æ–±–∞–≤—å—Ç–µ –≤–∞—à Chat ID ({chat_id}) –≤ —Å–ø–∏—Å–æ–∫ target_chat_ids –≤ —Ñ–∞–π–ª–µ src/bot/notifications.py"
    
    await message.answer(info_text, parse_mode="HTML")

@dp.callback_query()
async def handle_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ callback'–∏ –æ—Ç inline –∫–Ω–æ–ø–æ–∫"""
    await handle_notification_callback(callback, bot)

async def start_bot():
    print("‚úÖ Aiogram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await dp.start_polling(bot)
