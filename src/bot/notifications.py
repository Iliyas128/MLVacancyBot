from aiogram import Bot, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from src.db.database import (
    save_job_notification, 
    update_notification_status, 
    get_job_by_hash,
    mark_sent,
    already_sent,
    notification_already_sent
)
from src.bot.handlers import send_resume_via_telethon
from src.utils.email_sender import send_resume_email
import asyncio
from telethon.errors import FloodWaitError
from datetime import datetime

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è Telethon –∫–ª–∏–µ–Ω—Ç–∞
telethon_client = None

def set_telethon_client(client):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç Telethon –∫–ª–∏–µ–Ω—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—é–º–µ"""
    global telethon_client
    telethon_client = client

async def send_job_notification(bot: Bot, job_hash: str, target_user: str = "iliyasls"):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –æ—Ç–∫–ª–∏–∫–∞
    """
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞–∫–∞–Ω—Å–∏–∏
    job_info = get_job_by_hash(job_hash)
    if not job_info:
        print(f"‚ùå –í–∞–∫–∞–Ω—Å–∏—è —Å —Ö—ç—à–µ–º {job_hash} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return None
    
    text, usernames, emails, links, prob, created_at = job_info
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏
    if notification_already_sent(job_hash, target_user):
        print(f"üì® –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–∏ {job_hash} —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user}")
        return "already_sent"
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—é–º–µ –ø–æ –≤—Å–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–º –∫–æ–Ω—Ç–∞–∫—Ç–∞–º
    sent_count = 0
    errors = []
    
    print(f"üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—é–º–µ –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–∏ {job_hash}...")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
    if usernames and telethon_client:
        for username in usernames.split(","):
            username = username.strip()
            if username and not already_sent(username, job_hash):
                try:
                    success, error = await send_resume_via_telethon(
                        telethon_client, 
                        username, 
                        "data/resume.pdf"
                    )
                    if success:
                        mark_sent(username, job_hash)
                        sent_count += 1
                        print(f"‚úÖ –†–µ–∑—é–º–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram -> {username}")
                    else:
                        errors.append(f"Telegram {username}: {error}")
                        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram {username}: {error}")
                except Exception as e:
                    errors.append(f"Telegram {username}: {str(e)}")
                    print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram {username}: {e}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ email
    if emails:
        for email in emails.split(","):
            email = email.strip()
            if email and not already_sent(email, job_hash):
                try:
                    send_resume_email(email, "data/resume.pdf")
                    mark_sent(email, job_hash)
                    sent_count += 1
                    print(f"‚úÖ –†–µ–∑—é–º–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ email -> {email}")
                except Exception as e:
                    errors.append(f"Email {email}: {str(e)}")
                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email {email}: {e}")
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –≤ —á–∏—Ç–∞–µ–º–æ–º –≤–∏–¥–µ
    try:
        # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –∏–∑ –ë–î –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º
        dt = datetime.fromisoformat(created_at.replace('Z', '+00:00'))
        formatted_time = dt.strftime("%d.%m.%Y %H:%M")
    except:
        formatted_time = created_at
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    notification_text = f"üéØ <b>–ù–æ–≤–∞—è –≤–∞–∫–∞–Ω—Å–∏—è –Ω–∞–π–¥–µ–Ω–∞!</b>\n\n"
    notification_text += f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n{text[:500]}{'...' if len(text) > 500 else ''}\n\n"
    notification_text += f"üìä <b>–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å:</b> {prob:.2f}\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã
    contacts = []
    if usernames:
        contacts.extend([f"@{u}" for u in usernames.split(",") if u.strip()])
    if emails:
        contacts.extend(emails.split(","))
    if links:
        contacts.extend(links.split(","))
    
    if contacts:
        notification_text += f"üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç—ã:</b> {', '.join(contacts[:3])}\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ
    if sent_count > 0:
        notification_text += f"\n‚úÖ <b>–†–µ–∑—é–º–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!</b>\nüì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count} –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"
        if errors:
            notification_text += f"\n‚ö†Ô∏è –û—à–∏–±–∫–∏: {len(errors)}"
    else:
        notification_text += f"\n‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—é–º–µ</b>\n"
        if errors:
            notification_text += f"‚ö†Ô∏è –û—à–∏–±–∫–∏: {len(errors)}"
        else:
            notification_text += f"üìù –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏"
    
    # –°–æ–∑–¥–∞–µ–º inline –∫–Ω–æ–ø–∫–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É", callback_data=f"confirm_{job_hash}"),
            InlineKeyboardButton(text="‚ùå –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data=f"skip_{job_hash}")
        ],
        [
            InlineKeyboardButton(text="üìã –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç", callback_data=f"full_{job_hash}")
        ]
    ])
    
    # –°–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö chat_id –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    # –î–æ–±–∞–≤—å—Ç–µ —Å—é–¥–∞ —Å–≤–æ–π chat_id –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
    target_chat_ids = ["1011374221"
        # "YOUR_CHAT_ID_HERE",  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à chat_id
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ chat_id –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    ]
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ –≤—Å–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º chat_id
    sent_count_notifications = 0
    for chat_id in target_chat_ids:
        try:
            message = await bot.send_message(
                chat_id=chat_id,
                text=notification_text,
                parse_mode="HTML",
                reply_markup=keyboard
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏
            save_job_notification(job_hash, str(message.message_id), f"chat_{chat_id}")
            
            print(f"üì® –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤–∞–∫–∞–Ω—Å–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id}")
            sent_count_notifications += 1
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —á–∞—Ç {chat_id}: {e}")
    
    return sent_count_notifications if sent_count_notifications > 0 else None

async def handle_notification_callback(callback: types.CallbackQuery, bot: Bot):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    """
    data = callback.data
    job_hash = data.split("_", 1)[1]
    
    try:
        if data.startswith("confirm_"):
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —Ä–µ–∑—é–º–µ
            await handle_confirm_job(callback, bot, job_hash)
            
        elif data.startswith("skip_"):
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–ø—É—Å—Ç–∏–ª –≤–∞–∫–∞–Ω—Å–∏—é
            await handle_skip_job(callback, bot, job_hash)
            
        elif data.startswith("full_"):
            # –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –≤–∞–∫–∞–Ω—Å–∏–∏
            await handle_show_full_text(callback, bot, job_hash)
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞", show_alert=True)

async def handle_confirm_job(callback: types.CallbackQuery, bot: Bot, job_hash: str):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—é–º–µ
    """
    job_info = get_job_by_hash(job_hash)
    if not job_info:
        await callback.answer("–í–∞–∫–∞–Ω—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    text, usernames, emails, links, prob, created_at = job_info
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    update_notification_status(str(callback.message.message_id), "confirmed")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    new_text = callback.message.text + "\n\n‚úÖ <b>–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!</b>"
    
    # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìã –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç", callback_data=f"full_{job_hash}")]
    ])
    
    await callback.message.edit_text(
        text=new_text,
        parse_mode="HTML",
        reply_markup=keyboard
    )
    
    await callback.answer("–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!")

async def handle_skip_job(callback: types.CallbackQuery, bot: Bot, job_hash: str):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ–ø—É—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–∏
    """
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    update_notification_status(str(callback.message.message_id), "skipped")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    new_text = callback.message.text + "\n\n‚ùå <b>–í–∞–∫–∞–Ω—Å–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–∞</b>"
    
    # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìã –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç", callback_data=f"full_{job_hash}")]
    ])
    
    await callback.message.edit_text(
        text=new_text,
        parse_mode="HTML",
        reply_markup=keyboard
    )
    
    await callback.answer("–í–∞–∫–∞–Ω—Å–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–∞")

async def handle_show_full_text(callback: types.CallbackQuery, bot: Bot, job_hash: str):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –≤–∞–∫–∞–Ω—Å–∏–∏
    """
    job_info = get_job_by_hash(job_hash)
    if not job_info:
        await callback.answer("–í–∞–∫–∞–Ω—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    text, usernames, emails, links, prob, created_at = job_info
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
    full_text = f"üìã <b>–ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –≤–∞–∫–∞–Ω—Å–∏–∏:</b>\n\n{text}"
    
    if len(full_text) > 4096:
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
        parts = [full_text[i:i+4096] for i in range(0, len(full_text), 4096)]
        for i, part in enumerate(parts):
            await callback.message.answer(
                text=part,
                parse_mode="HTML"
            )
    else:
        await callback.message.answer(
            text=full_text,
            parse_mode="HTML"
        )
    
    await callback.answer("–ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
