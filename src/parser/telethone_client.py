from telethon import TelegramClient, events
from config.config import API_ID, API_HASH
from src.db.database import save_job, mark_sent, already_sent, get_jobs_sent
from src.ml.classifier import predict
from src.bot.handlers import send_resume_via_telethon
from src.utils.email_sender import send_resume_email
from src.bot.notifications import send_job_notification
import re
import requests
from bs4 import BeautifulSoup
import asyncio
from telethon.errors import FloodWaitError

client = TelegramClient('userbot_session', API_ID, API_HASH)
THRESHOLD = 0.60  # –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
RESUME_PATH = "data/resume.pdf"
BLOCKED_USERNAMES = {"@teletype", "@telegram","@gmail", "@quinton_nietfeld", "@kovesh"}
BLOCKED_EMAIL_DOMAINS = ["teletype.in", "telegram.org", "noreply"]

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞
bot_instance = None

def set_bot_instance(bot):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    global bot_instance
    bot_instance = bot

# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ ---
def extract_contacts_from_text(text):
    emails = re.findall(r"[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}", text)
    usernames = []
    links = re.findall(r"https?://\S+", text)

    # --- –ü—Ä–æ–≤–µ—Ä—è–µ–º HTML (–µ—Å–ª–∏ –µ—Å—Ç—å) ---
    soup = BeautifulSoup(text, "html.parser")

    # –ò—â–µ–º <a href="...t.me/...">@username</a>
    for a in soup.find_all("a", href=True):
        href = a["href"]
        if "t.me/" in href or "telegram.me/" in href:
            uname = re.search(r"t\.me/([a-zA-Z0-9_]{3,32})", href)
            if uname:
                usernames.append("@" + uname.group(1))

    # --- –ò–∑–≤–ª–µ–∫–∞–µ–º username –∏–∑ –æ–±—ã—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ ---
    usernames += re.findall(r"@([a-zA-Z0-9_]{3,32})", text)
    usernames = ["@" + u if not u.startswith("@") else u for u in usernames]

    # --- –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Å—ã–ª–∫–∏ (–∏—â–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ) ---
    for link in links:
        try:
            response = requests.get(link, timeout=5, headers={"User-Agent": "Mozilla/5.0"})
            if response.status_code == 200:
                html = response.text
                page_soup = BeautifulSoup(html, "html.parser")

                # 1. –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                page_text = page_soup.get_text(separator=" ", strip=True)

                # 2. –ò—â–µ–º email
                emails += re.findall(r"[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}", page_text)

                # 3. –ò—â–µ–º usernames
                page_usernames = re.findall(r"@([a-zA-Z0-9_]{3,32})", page_text)
                usernames += ["@" + u for u in page_usernames]

                # 4. –ò—â–µ–º –≤ <a href>
                for a in page_soup.find_all("a", href=True):
                    href = a["href"]
                    if "t.me/" in href or "telegram.me/" in href:
                        uname = re.search(r"t\.me/([a-zA-Z0-9_]{3,32})", href)
                        if uname:
                            usernames.append("@" + uname.group(1))

        except Exception as e:
            print(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Å—ã–ª–∫–∏ {link}: {e}")

    return list(set(emails)), list(set(usernames)), links

# --- –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ ---
def filter_contacts(emails, usernames):
    """–§–∏–ª—å—Ç—Ä—É–µ–º email –∏ username: —É–±–∏—Ä–∞–µ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏ –¥—É–±–ª–∏."""
    # –§–∏–ª—å—Ç—Ä—É–µ–º email –ø–æ –¥–æ–º–µ–Ω–∞–º
    filtered_emails = []
    seen_emails = set()
    for email in emails:
        domain = email.split('@')[-1].lower()
        if domain not in BLOCKED_EMAIL_DOMAINS and email not in seen_emails:
            filtered_emails.append(email)
            seen_emails.add(email)

    # –§–∏–ª—å—Ç—Ä—É–µ–º usernames –ø–æ —á—ë—Ä–Ω–æ–º—É —Å–ø–∏—Å–∫—É
    filtered_usernames = []
    seen_users = set()
    for uname in usernames:
        original_uname = uname
        uname = uname.strip()
        if not uname.startswith("@"):
            uname = "@" + uname
        
        print(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º username: '{original_uname}' -> '{uname}'")
        print(f"   –í BLOCKED_USERNAMES: {uname in BLOCKED_USERNAMES}")
        print(f"   –£–∂–µ –≤–∏–¥–µ–ª–∏: {uname.lower() in seen_users}")
        
        if uname not in BLOCKED_USERNAMES and uname.lower() not in seen_users:
            filtered_usernames.append(uname)
            seen_users.add(uname.lower())
            print(f"   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –≤ filtered_usernames")
        else:
            print(f"   ‚ùå –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω")

    return filtered_emails, filtered_usernames

async def start_parser():
    await client.start()
    print("‚úÖ Telethon parser –∑–∞–ø—É—â–µ–Ω...")

    @client.on(events.NewMessage)
    async def handler(event):
        text = event.message.message or ""
        if not text.strip():
            return

        # --- –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ ---
        label, prob = predict(text)

        # --- –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã ---
        emails, usernames, links = extract_contacts_from_text(text)
        
        print("üîç –î–û —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:")
        print("Emails:", emails)
        print("Usernames:", usernames)
        print("Links:", links)

        # --- –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ ---
        emails, usernames = filter_contacts(emails, usernames)
        
        print("üîç –ü–û–°–õ–ï —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:")
        print("Emails:", emails)
        print("Usernames:", usernames)
        print("Links:", links)

        job_hash = save_job(
            text=text,
            chat_id=event.chat_id,
            msg_id=event.message.id,
            prob=prob,
            usernames=usernames,
            links=links,
            emails=emails
        )

        print(f"\nüìå –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:")
        print(f"–¢–µ–∫—Å—Ç: {text[:120]}...")
        print(f"–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏: {prob:.4f}, –ú–µ—Ç–∫–∞: {label}")
        print(f"Usernames: {usernames}, Links: {links}, Emails: {emails}")

        if label == 1 and prob >= THRESHOLD:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤–∞–∫–∞–Ω—Å–∏–∏
            if bot_instance:
                try:
                    await send_job_notification(bot_instance, job_hash, "iliyasls")
                    print(f"üì® –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤–∞–∫–∞–Ω—Å–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            
            # –†–µ–∑—é–º–µ —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            print("‚Ñπ –†–µ–∑—é–º–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
        else:
            print("‚ùå –ù–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –∏–ª–∏ –Ω–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤.")

    await client.run_until_disconnected()

