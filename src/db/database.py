import sqlite3
import hashlib

DB_PATH = "data/db.sqlite3"

def init_db():
    with sqlite3.connect(DB_PATH) as conn:
        # –°—Ç–∞—Ä–∞—è —Ç–∞–±–ª–∏—Ü–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å /jobs (–µ—Å–ª–∏ —Ç—ã –µ—ë —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å)
        conn.execute("""CREATE TABLE IF NOT EXISTS messages (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            text TEXT
        )""")
        # –ù–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞ –≤–∞–∫–∞–Ω—Å–∏–π
        conn.execute("""CREATE TABLE IF NOT EXISTS jobs (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            text TEXT,
            chat_id TEXT,
            msg_id TEXT,
            prob REAL,
            usernames TEXT,
            emails TEXT,
            links TEXT,
            hash TEXT UNIQUE,
            created_at TEXT DEFAULT CURRENT_TIMESTAMP
        )""")
        # –ö–æ–º—É —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ —Ä–µ–∑—é–º–µ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏
        conn.execute("""CREATE TABLE IF NOT EXISTS jobs_sent (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            username TEXT,
            text_hash TEXT,
            sent_at TEXT DEFAULT CURRENT_TIMESTAMP
        )""")
        # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –≤–∞–∫–∞–Ω—Å–∏—è—Ö
        conn.execute("""CREATE TABLE IF NOT EXISTS job_notifications (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            job_hash TEXT,
            notification_msg_id TEXT,
            sent_to_user TEXT,
            status TEXT DEFAULT 'pending',
            created_at TEXT DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (job_hash) REFERENCES jobs (hash)
        )""")
    
    # –û—á–∏—â–∞–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    cleanup_duplicate_usernames()
    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
    cleanup_old_records()

def _hash_text(text: str) -> str:
    return hashlib.sha256((text or "").encode("utf-8")).hexdigest()[:16]

def save_message(text: str):
    with sqlite3.connect(DB_PATH) as conn:
        conn.execute("INSERT INTO messages (text) VALUES (?)", (text,))

def get_all_messages():
    with sqlite3.connect(DB_PATH) as conn:
        cur = conn.execute("SELECT text FROM messages ORDER BY id DESC")
        return [r[0] for r in cur.fetchall()]

def save_job(text, chat_id=None, msg_id=None, prob=None, usernames=None, emails=None, links=None):
    h = _hash_text(text)
    usernames_s = ",".join(usernames or [])
    emails_s = ",".join(emails or [])
    links_s = ",".join(links or [])
    with sqlite3.connect(DB_PATH) as conn:
        conn.execute("""INSERT OR IGNORE INTO jobs
                        (text, chat_id, msg_id, prob, usernames, emails, links, hash)
                        VALUES (?, ?, ?, ?, ?, ?, ?, ?)""",
                     (text, str(chat_id) if chat_id is not None else None,
                      str(msg_id) if msg_id is not None else None,
                      prob, usernames_s, emails_s, links_s, h))
    return h  # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ö—ç—à –¥–ª—è —Å–≤—è–∑–∏

def _normalize_username(username: str) -> str:
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç username: —É–±–∏—Ä–∞–µ—Ç @ –∏ –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É"""
    username = username.strip()
    if username.startswith("@"):
        username = username[1:]
    return username.lower()

def already_sent(username: str, text_hash: str) -> bool:
    with sqlite3.connect(DB_PATH) as conn:
        normalized_username = _normalize_username(username)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ –º—ã —Ä–µ–∑—é–º–µ —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
        cur = conn.execute("""
            SELECT sent_at FROM jobs_sent 
            WHERE username=? AND sent_at > datetime('now', '-1 day') 
            ORDER BY sent_at DESC LIMIT 1
        """, (normalized_username,))
        result = cur.fetchone()
        if result:
            print(f"   ‚è∞ –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—Ç–ø—Ä–∞–≤–∫–∞ {normalized_username}: {result[0]}")
        return result is not None

def mark_sent(username: str, text_hash: str):
    with sqlite3.connect(DB_PATH) as conn:
        normalized_username = _normalize_username(username)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å —Å —Ç–µ–∫—É—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º
        conn.execute("INSERT INTO jobs_sent (username, text_hash, sent_at) VALUES (?, ?, datetime('now'))",
                     (normalized_username, text_hash))

def get_recent_jobs(limit: int = 10):
    with sqlite3.connect(DB_PATH) as conn:
        cur = conn.execute("""SELECT text, usernames, emails, links, prob, created_at
                              FROM jobs ORDER BY id DESC LIMIT ?""", (limit,))
        return cur.fetchall()

def get_jobs_sent():
    """–û—Ç–ª–∞–¥–æ—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã jobs_sent"""
    with sqlite3.connect(DB_PATH) as conn:
        cur = conn.execute("SELECT username, text_hash, sent_at FROM jobs_sent ORDER BY sent_at DESC")
        return cur.fetchall()

def cleanup_duplicate_usernames():
    """–û—á–∏—â–∞–µ—Ç –¥—É–±–ª–∏—Ä—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏ –≤ jobs_sent, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ username"""
    with sqlite3.connect(DB_PATH) as conn:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏
        cur = conn.execute("SELECT username, text_hash, sent_at FROM jobs_sent")
        records = cur.fetchall()
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–º—É username –∏ text_hash
        normalized_records = {}
        for username, text_hash, sent_at in records:
            normalized_username = _normalize_username(username)
            key = (normalized_username, text_hash)
            if key not in normalized_records:
                normalized_records[key] = (normalized_username, text_hash, sent_at)
        
        # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –∏ –≤—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–∞–ø–∏—Å–∏
        conn.execute("DELETE FROM jobs_sent")
        for normalized_username, text_hash, sent_at in normalized_records.values():
            conn.execute("INSERT INTO jobs_sent (username, text_hash, sent_at) VALUES (?, ?, ?)",
                        (normalized_username, text_hash, sent_at))
        
        print(f"üßπ –û—á–∏—â–µ–Ω–æ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π. –û—Å—Ç–∞–ª–æ—Å—å {len(normalized_records)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π.")

def cleanup_old_records():
    """–£–¥–∞–ª—è–µ—Ç –∑–∞–ø–∏—Å–∏ —Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π"""
    with sqlite3.connect(DB_PATH) as conn:
        cur = conn.execute("DELETE FROM jobs_sent WHERE sent_at < datetime('now', '-7 days')")
        deleted_count = cur.rowcount
        print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ {deleted_count} —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π (—Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π)")

def save_job_notification(job_hash: str, notification_msg_id: str, sent_to_user: str):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –æ –≤–∞–∫–∞–Ω—Å–∏–∏"""
    with sqlite3.connect(DB_PATH) as conn:
        conn.execute("""INSERT INTO job_notifications 
                        (job_hash, notification_msg_id, sent_to_user, status)
                        VALUES (?, ?, ?, 'pending')""",
                     (job_hash, notification_msg_id, sent_to_user))

def update_notification_status(notification_msg_id: str, status: str):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (applied/not_applied)"""
    with sqlite3.connect(DB_PATH) as conn:
        conn.execute("""UPDATE job_notifications 
                        SET status = ? 
                        WHERE notification_msg_id = ?""",
                     (status, notification_msg_id))

def get_job_by_hash(job_hash: str):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞–∫–∞–Ω—Å–∏–∏ –ø–æ —Ö—ç—à—É"""
    with sqlite3.connect(DB_PATH) as conn:
        cur = conn.execute("""SELECT text, usernames, emails, links, prob, created_at
                              FROM jobs WHERE hash = ?""", (job_hash,))
        return cur.fetchone()

def get_pending_notifications_count():
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–∂–∏–¥–∞—é—â–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    with sqlite3.connect(DB_PATH) as conn:
        cur = conn.execute("""SELECT COUNT(*) FROM job_notifications 
                              WHERE status = 'pending'""")
        return cur.fetchone()[0]

def notification_already_sent(job_hash: str, target_user: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±—ã–ª–æ –ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –¥–∞–Ω–Ω–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏"""
    with sqlite3.connect(DB_PATH) as conn:
        cur = conn.execute("""SELECT COUNT(*) FROM job_notifications 
                              WHERE job_hash = ? AND sent_to_user = ?""", 
                          (job_hash, target_user))
        return cur.fetchone()[0] > 0

def get_job_notification_status(job_hash: str, target_user: str):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–∏"""
    with sqlite3.connect(DB_PATH) as conn:
        cur = conn.execute("""SELECT status, created_at FROM job_notifications 
                              WHERE job_hash = ? AND sent_to_user = ?""", 
                          (job_hash, target_user))
        return cur.fetchone()
