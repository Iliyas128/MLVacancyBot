#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –≤–∞–∫–∞–Ω—Å–∏—è—Ö —Å Chat ID
"""

import asyncio
import sqlite3
from src.db.database import init_db, save_job, get_job_by_hash
from src.bot.notifications import send_job_notification
from src.bot.bot import bot

async def test_notification_with_chat_id():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–∞–∫–∞–Ω—Å–∏–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Chat ID"""
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    init_db()
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –≤–∞–∫–∞–Ω—Å–∏—é
    test_job_text = """
    –ò—â–µ–º Senior Python —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã –Ω–∞–¥ AI –ø—Ä–æ–µ–∫—Ç–æ–º!
    
    –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
    - Python 3.8+
    - –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã —Å ML/AI –±–∏–±–ª–∏–æ—Ç–µ–∫–∞–º–∏ (TensorFlow, PyTorch)
    - –ó–Ω–∞–Ω–∏–µ Django/Flask
    - –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã —Å Docker
    - –ó–Ω–∞–Ω–∏–µ SQL –∏ NoSQL –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
    
    –£—Å–ª–æ–≤–∏—è:
    - –£–¥–∞–ª–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞
    - –ó–∞—Ä–ø–ª–∞—Ç–∞ –æ—Ç 200,000 —Ä—É–±
    - –ü–æ–ª–Ω–∞—è –∑–∞–Ω—è—Ç–æ—Å—Ç—å
    - –ì–∏–±–∫–∏–π –≥—Ä–∞—Ñ–∏–∫
    
    –ö–æ–Ω—Ç–∞–∫—Ç—ã:
    @hr_ai_company
    hr@ai-company.com
    https://t.me/hr_ai_company
    """
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –≤–∞–∫–∞–Ω—Å–∏—é
    job_hash = save_job(
        text=test_job_text,
        chat_id="test_chat",
        msg_id="test_msg",
        prob=0.92,
        usernames=["hr_ai_company"],
        emails=["hr@ai-company.com"],
        links=["https://t.me/hr_ai_company"]
    )
    
    print(f"‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –≤–∞–∫–∞–Ω—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞ —Å —Ö—ç—à–µ–º: {job_hash}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–∞–∫–∞–Ω—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–∏–ª–∞—Å—å
    job_info = get_job_by_hash(job_hash)
    if job_info:
        print(f"‚úÖ –í–∞–∫–∞–Ω—Å–∏—è –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î: {job_info[0][:100]}...")
    else:
        print("‚ùå –í–∞–∫–∞–Ω—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î")
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    print("üì® –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ...")
    try:
        msg_id = await send_job_notification(bot, job_hash, "iliyasls")
        if msg_id:
            print(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ! ID —Å–æ–æ–±—â–µ–Ω–∏—è: {msg_id}")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

async def test_stats():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–º–∞–Ω–¥—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    
    with sqlite3.connect("data/db.sqlite3") as conn:
        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–∫–∞–Ω—Å–∏–π
        total_jobs = conn.execute("SELECT COUNT(*) FROM jobs").fetchone()[0]
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ä–µ–∑—é–º–µ
        total_sent = conn.execute("SELECT COUNT(*) FROM jobs_sent").fetchone()[0]
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        applied = conn.execute("SELECT COUNT(*) FROM job_notifications WHERE status = 'applied'").fetchone()[0]
        not_applied = conn.execute("SELECT COUNT(*) FROM job_notifications WHERE status = 'not_applied'").fetchone()[0]
        pending = conn.execute("SELECT COUNT(*) FROM job_notifications WHERE status = 'pending'").fetchone()[0]
    
    print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"   –í—Å–µ–≥–æ –≤–∞–∫–∞–Ω—Å–∏–π: {total_jobs}")
    print(f"   –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ä–µ–∑—é–º–µ: {total_sent}")
    print(f"   –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:")
    print(f"     - –û—Ç–∫–ª–∏–∫–Ω—É–ª—Å—è: {applied}")
    print(f"     - –ü—Ä–æ–ø—É—Å—Ç–∏–ª: {not_applied}")
    print(f"     - –û–∂–∏–¥–∞–µ—Ç: {pending}")

def print_setup_instructions():
    """–ü–µ—á–∞—Ç–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ"""
    print("\n" + "="*60)
    print("üîß –ò–ù–°–¢–†–£–ö–¶–ò–ò –ü–û –ù–ê–°–¢–†–û–ô–ö–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ô")
    print("="*60)
    print("1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞: python main.py")
    print("2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É –∫–æ–º–∞–Ω–¥—É: /myid")
    print("3. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –≤–∞—à Chat ID –∏–∑ –æ—Ç–≤–µ—Ç–∞")
    print("4. –û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª: src/bot/notifications.py")
    print("5. –ù–∞–π–¥–∏—Ç–µ —Å—Ç—Ä–æ–∫—É: target_chat_ids = []")
    print("6. –î–æ–±–∞–≤—å—Ç–µ –≤–∞—à Chat ID:")
    print("   target_chat_ids = [")
    print("       '–í–ê–®_CHAT_ID_–ó–î–ï–°–¨',")
    print("   ]")
    print("7. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞")
    print("8. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —Ç–µ—Å—Ç: python test_notifications_fixed.py")
    print("="*60)

if __name__ == "__main__":
    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å Chat ID...")
    
    # –ü–µ—á–∞—Ç–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    print_setup_instructions()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    asyncio.run(test_stats())
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    asyncio.run(test_notification_with_chat_id())
    
    print("‚úÖ –¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
    print("\nüí° –ï—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –ø—Ä–∏—Ö–æ–¥—è—Ç, —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –≤—ã—à–µ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Chat ID.")
